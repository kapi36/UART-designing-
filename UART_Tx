module UART_Tx (

  input wire rst ,
  input wire send ,
  input wire [1:0] pt , 
  input wire [7:0] data_in, 
  input wire [1:0] br,
  input wire clk ,
  output af ,
  output df,
  output data_tx 
); 
  
  wire bc; 
  wire pb; 
  
  Baud unit1 (clk , rst, br, bc); 
  parity unit2(rst, pt,data_in , pb); 
  piso unit3(rst, send, bc, pb,data_in, pt, data_tx , af, df);  
  
  
endmodule 

// baudrate generator unit 1: 
module Baud(input wire clk, input wire rst ,input wire[1:0]br , output reg bc); 
  reg [13:0] clock_ticks;
  reg [13:0] final_value; // defined so we know that when we able to toggle our output signal  // //baud_clk. 
  localparam b24  = 2'b00,
             b48  = 2'b01,
             b96  = 2'b10,
             b192 = 2'b11;
  
  always @(*)
begin
  case (br)
        b24 : final_value = 14'd10417; 
        b48 : final_value = 14'd5208;  
        b96 : final_value = 14'd2604;   
        b192 : final_value = 14'd1302;  
        default: final_value = 14'd0;      
    endcase
  end
  always @(negedge rst, posedge clk)
    begin
      if(!rst)begin
        clock_ticks <= 14'd0; 
        bc    <= 1'b0; 
      end
    
  else
    begin
      if (clock_ticks == final_value)
        begin
          clock_ticks <= 14'd0; 
          bc    <= ~bc; 
        end 
      else
        begin
          clock_ticks <= clock_ticks + 1'd1;
          bc    <= bc;
        end
    end 
end

endmodule

// parity bit unit 
module parity(input wire rst , input wire[1:0]pt , input wire [7:0] data_in, output reg pb ); 
  
  
  localparam odd = 2'b00, 
  			 even  = 2'b01; 
  always @(*) 
    begin 
      if(!rst) 
        pb = 1'b1; 
      else begin 
        case(pt)
          even: pb  = (^data_in)?1'b1: 1'b0 ; 
          odd: pb =(^data_in)?1'b0 : 1'b1 ;
          default: pb = 1'b1 ; // default there is no parity bit 
        endcase 
      end
    end
endmodule 
      
// PISO unit code : 
     
module piso(
    input wire rst,         
    input wire send,            
    input wire bc,      
 	input wire pb,       
    input wire [7:0] data_in, 
  input wire [1:0] pt ,
  
    output reg data_tx, 	        
	output reg af,       
	output reg df 	         
);

//  Internal declarations
  reg [3:0]   stop_count;
  reg [10:0]  frame_r;
  reg [10:0]  frame_main;
  reg next_state;
  wire  count_full;

//  Encoding the states
localparam IDLE   = 1'b0,
           ACTIVE = 1'b1;

//  Frame generation
  always @(posedge bc, negedge rst) begin
    if (!rst)     frame_r <= {11{1'b1}};
    else if (next_state) frame_r <= frame_r;
    else                 frame_r <= {1'b1,pb,data_in,1'b0};
end

// Counter logic
always @(posedge bc, negedge rst) begin
    if (!rst || !next_state || count_full) stop_count <= 4'd0;
    else  stop_count <= stop_count + 4'd1;
end
assign count_full     = (stop_count == 4'd11);

//  Transmission logic FSM
always @(posedge bc, negedge rst) begin
    if (!rst) next_state   <= IDLE;
	else
	begin
		if (!next_state) begin
            if (send) next_state   <= ACTIVE;
            else      next_state   <= IDLE;
        end
        else begin
            if (count_full) next_state   <= IDLE;
            else            next_state   <= ACTIVE;
        end
	end 
end

always @(*) begin
    if (rst && next_state && (stop_count != 4'd0)) begin
        data_tx      = frame_main[0];
        frame_main    = frame_main >> 1;
        af = 1'b1;
        df   = 1'b0;
    end
    else begin
        data_tx      = 1'b1;
        frame_main   = frame_r;
        af = 1'b0;
        df    = 1'b1;
    end
end

endmodule  
      
      
          
          
        
  
  
